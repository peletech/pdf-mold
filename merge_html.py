# script that creates the template HTML file:
# - merges the various css and html files
# - replaces sample text with variable names, loops, etc.



# open up "pagedjs.html" and inline the css
# replace the css import line with remaining css
# replace the relative image urls with base64 encoded urls

from base64 import b64encode
# from re import findall as re_all, compile as re_comp
import re

html_comment ='<!--{}-->'

comments = [
    'Automatically generated file - Do not modify directly!',
    '',
    # put in script name and date dynamically
    f'This file is generated by {__file__} at {__import__("datetime").datetime.now()}.',
    'It is a modified version of the pagedjs.html file.',
    '',
    'The following changes are made:',
    'The css is inlined and the images are converted to base64.',
    'The css import is removed and the css is indented.',
    ''
]

processed_files = []

with open('pagedjs.html', 'r') as f_html_in:
    html_in = f_html_in.read()
processed_files.append('pagedjs.html')

with open('pagedjs.css', 'r') as f_css_in:
    css_in = f_css_in.read()
processed_files.append('pagedjs.css')

css_imports = []

with open('paged_interface.css', 'r') as f_css_import_in:
    css_imports.append(f_css_import_in.read())
processed_files.append('paged_interface.css')

css_out = css_in.replace('@import url("paged_interface.css")', '\n\n'.join(css_imports))

css_out = '\n'.join([
    ' ' * 4 * 2 + line for line in
    css_out.splitlines()
])

html_out = html_in.replace(
    '<link rel="stylesheet" href="pagedjs.css">',
    f"""
    <style>
{css_out}
    </style>
"""
)


# find all pdf-xxx.png files and replace the relative url with a base64 url
# for fl_nm in re_all(r'pdf-\d{3}\.png', html_out):
for fl_nm in re.findall(r'pdf-\d{3}\.png', html_out):
    if fl_nm == 'pdf-003.png':
        # cover page image should be from the JSON file
        html_out = html_out.replace('pdf-003.png', r'{{report.cover_page_image}}')
        continue
    processed_files.append(fl_nm)
    with open(fl_nm, 'rb') as img_f:
        html_out = html_out.replace(
            f'"{fl_nm}"', '"' + 'data:image/png;base64,'
            + b64encode(img_f.read()).decode('utf-8') + '"'
        )

html_replacements = {
    # 'https://unpkg.com/pagedjs/dist/paged.polyfill.js': '',
    'https://unpkg.com/pagedjs/dist/paged.polyfill.js':
    'https://cdn.jsdelivr.net/npm/pagedjs@0.3.5/dist/paged.polyfill.js',

    # basic customer info / report info
    '01-21-2023': r'{{report.date}}',
    'John Doe': r'{{client.name}}',
    'Far Rockaway, NY 11692': r'{{client.location}}',
    '1610 Affray Avenue, APT 4A': r'{{client.address}}',
    'Five Boro - Report Template': 'Five Boro Mold - Inspection Report',
    '(212)-690-4500': r'{{client.phone_number}}',

    # signs of mold
    'John Dillon': r'{{signs_of_mold.person_on_sight}}',
    'attic room': r'{{signs_of_mold.location}}',
    'Yes, odor present': r'{{signs_of_mold.odor_present}}',
    'Smoky': r'{{signs_of_mold.odor_type}}',
    'Yes, air sample taken': r'{{signs_of_mold.air_sample}}',

    # moisture concerns
    'Wet Moisture': r'{{moisture_concerns.type}}',
    'The Moist Room':  r'{{moisture_concerns.room_name}}',
    'The wet area':  r'{{moisture_concerns.location_in_the_room}}',
    'The damp spot':  r'{{moisture_concerns.specific_area}}',
    'Deep Phobias about mold':  r'{{moisture_concerns.source}}',
    'Not Obvious Reasons':  r'{{moisture_concerns.cause}}',
    'No Previous Occurrences':  r'{{moisture_concerns.previous}}',
    'Damage not repaired':  r'{{moisture_concerns.repaired}}',

    # remediation outline
    '<li><b>the entire room</b></li>': '{% for location in remediation_outline.locations %}<li><b>{{location}}</b></li>{% endfor %}',
    '<li>Something Else</li>': '',
    'the whole building': r'{{remediation_outline.throughout}}',

    # treatment process
    '<li>The only treatment step</li>': '{% for step in treatment_process.steps %}<li>{{step}}</li>{% endfor %}',
    'entire morning and night': r'{{treatment_process.dehumidifier}}',
}

for key, value in html_replacements.items():
    html_out = html_out.replace(key, value)


pattern_ = r"<tr>\s*<td>\s*<p>{{Table}} Room \d</p>\s*</td>\s*(?:<td>\s*<p>.*?</p>\s*</td>\s*){2,4}</tr>"

table_dict = {
    'Sample': 'sample in sampling_data',
    'Damage': 'damage in mold_damage_data',
    'Visual': 'visual in visual_assessment'
}

for key in table_dict.keys():
    pattern = pattern_.replace(r'{{Table}}', key)
    matches = re.findall(pattern, html_out)
    for i, match in enumerate(matches):
        if i == 0:
            html_out = html_out.replace(
                match,
                '\n{% for x in xx %}\n'.replace('x in xx', table_dict[key])
                + match.replace(f'{key} Room 1', '{{' + key.lower() + '.room}}').replace(f'{key} Location 1', '{{' + key.lower() + '.location}}')
                + '\n{% endfor %}'
            )
        else:
            html_out = html_out.replace(match, '')


# Replace HTML with Mustache tags
html_out = html_out\
    .replace('Visual Color 1', '{{visual.color}}')\
    .replace('Visual Test 1', '{{visual.test}}')\
    .replace('Sample Lab result 1', '{{sample.lab_result}}')\
    .replace('Sample Mold type 1', '{{sample.mold_type}}')\
    .replace('Damaging Damage 1', '{{damage.damage}}')\
    .replace('Damage Type 1', '{{damage.type}}')


# Observation Images and Infrared Images
pattern_ = r'(<table\sclass="card\savoid-breaks">\s*<thead>\s*<td>(.*?)<\/td>\s*<\/thead>\s*<tbody>\s*<tr>\s*<td><img\s(?:[^>]*\s)?alt="{{Table}}\sImage\s\d"[^>]*><\/td>\s*<\/tr>\s*<tr>\s*<td>(.*?)<\/td>\s*<\/tr>\s*<\/tbody>\s*<\/table>)'
table_keys = {
    'Infrared': 'images_infrared',
    'Observations': 'observations_and_images'
}

for key in table_keys.keys():
    pattern = pattern_.replace(r'{{Table}}', key)
    matches = re.findall(pattern, html_out)
    for i, match in enumerate(matches):
        if i == 0:
            html_out = html_out.replace(
                match[0],
                '\n{% for image in ' + table_keys[key] + ' %}\n'
                + match[0].replace('Description of Image 1', '{{image.description}}').replace('Image 1','{{image.title}}')
                + '\n{% endfor %}'
            )
        else:
            html_out = html_out.replace(match[0], '')
html_out = re.sub(r'https://picsum.photos/seed/\d+/\d+/\d+', '{{image.url}}', html_out)

# add the list of processed files to the end of the HTML comments list
comments.append('Processed files:')
comments.extend(processed_files)

# add comments to top of the HTML file
comments = [''] + comments + ['']
html_out = html_comment.format('\n'.join(comments)) + '\n' + html_out


print(html_out)